name: Build and Publish Precompiled Binaries for speaker-rebuild

on:
  push:
    branches:
      - master  # Trigger on push to the master branch
  pull_request:
    branches:
      - master  # Trigger on pull request to the master branch

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]  # Build on Linux, Windows, and macOS

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'  # Use the desired Node.js version

      # Install necessary packages (specifically for Linux)
      - name: Install libasound2-dev
        run: sudo apt-get install -y libasound2-dev
        if: matrix.os == 'ubuntu-latest'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          npm install  # Install dependencies
          npm install @mapbox/node-pre-gyp --save-dev  # Install @mapbox/node-pre-gyp

      # Step 4: Rebuild the native module (to ensure the binary is built)
      - name: Rebuild the speaker module
        run: |
          npx @mapbox/node-pre-gyp rebuild --loglevel=info  # Rebuild the binary
        env:
          NODE_ENV: production

      # Step 5: Build the speaker module (native bindings)
      - name: Build the speaker module
        run: |
          npx @mapbox/node-pre-gyp configure build --fallback-to-build  # Build the binary if not already built
        env:
          NODE_ENV: production
      # Step 7: Package the binary
      - name: Package the speaker binary
        run: |
          npx @mapbox/node-pre-gyp package  # Package the binary
        env:
          NODE_ENV: production
      # Step 8: Get version from package.json using get-version-action
      - name: Get version from package.json
        id: version
        uses: bbonkr/get-version-action@v1
        with:
          project: './package.json'  # Path to your package.json (use relative path if needed)    
      # Step 9: Publish to npm
      - name: Publish to npm
        run: |
          npm cache clean --force
          npm version "${{ steps.version.outputs.version }}-${{ matrix.os }}" --no-git-tag-version
          npm publish --access public  # Publish the package to npm
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}  # npm token for authentication

      # Step 10: Upload the precompiled binaries as artifacts
      - name: Upload precompiled binaries as artifacts
        uses: actions/upload-artifact@v4  # Updated to v4
        with:
          name: speaker-binaries
          path: build/stage/*.tar.gz  # Path to the compiled binaries in the build/Release directory
